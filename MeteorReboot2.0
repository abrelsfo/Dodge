from collections import *
from filelock import FileLock
from random import randint
import numpy as np
import cv2
import sys
import time
import os

user = ''
squares = []
square = (512,1012)
score = 0
multiplier = 1
multi_count = 0
line_count = 0
lines_up = False
drop_speed = 5
drop_count = 0
img = np.zeros((1024,1024,3), np.uint8)

def highscores():
    global img, fscore
    
    with FileLock('path/highscores.txt'):   #Change path to directory of your choosing
        with open('path/highscores.txt', 'r+') as f:    #Change path to directory of your choosing
            d = defaultdict(list)
            scores = []
            if os.stat('path/highscores.txt').st_size != 0:   #Change path to directory of your choosing
                for i in f:
                    fuser, fscore = i.replace('\n','').split()
                    fscore = int(fscore)
                    d[fscore].append(fuser)
                    scores.append(fscore)
                scores.sort()
            
            
            scores.sort()
            if len(scores) == 0 or score > scores[-1]:
                txt = 'New High Score! ' + str(score)
                print txt
                cv2.putText(img,txt,(358,256), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255))
            else:
                txt = 'Score: ' + str(score)
                print txt
                cv2.putText(img,txt,(420,256), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255))
                
            scores.append(score)
            d[score].append(user)    
            scores.sort()        

            if len(scores) > 10:
                del d[scores[0]]
                del scores[0]
            
            f.seek(0)
            f.truncate()
            count = 0
            d = OrderedDict(sorted(d.items(), reverse = True))
            for k,v in d.items():
                for i in v:
                    count += 30
                    s = i + ' ' + str(k)
                    txt = "{:10} {:>6}".format(i, k)
                    cv2.putText(img,txt,(390,512+count), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255))
                    f.write(s + '\n')
                
            
        
def intersect(square1):
    global img, multiplier, multi_count, line_count, lines_up, drop_speed
    
    if abs(square1[0]-square[0]) < 18 and abs(square1[1]-square[1]) < 18:
        if square1[2] == 1:
            drop_speed = 7
            
        elif square1[2] == 2:
            multi_count = 0
            multiplier = 2
            
        elif square1[2] == 3:        
            line_count = 0
            lines_up = True
            
        else:
            return True
    return False    
 
def drop():
    global img, squares, lines_up, score
    
    c = randint(0,1025)
    
    fill = 1    #1 is hollow -1 is filled

    #Determines type of block to fall
    if c%50 == 0:   #Speed up
        typ = 1
        color = (0,0,255)
        fill = -1
        
    elif c%30 == 0: #2x Points
        typ = 2
        color = (255,255,255)
        
    elif c%20 == 0: #Lines
        typ = 3
        color = (232,236,61)
        
    else: #Normal
        typ = 0
        color = (255,0,255)
        
    cv2.rectangle(img,(c-6,0),(c+6,12),color,fill)
    if lines_up == True:
        line(c-6, 0, square[0], square[1], color[0],color[1],color[2])

    squares.append([c,6,typ, color, fill])
    
def fall():
    global img, squares, square, score, multiplier

    x = square[0]
    y = square[1]
    count = 0
    txt = 'Score: ' + str(score)
    cv2.rectangle(img,(0,0),(1024,1024),(0,0,0),-1)
    cv2.rectangle(img,(x-12,y-12),(x+12,y+12),(0,255,0),-1)
    cv2.putText(img,txt,(0,24), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255))
    
    for i in xrange(len(squares)):
        i = i-count
        x = squares[i][0]
        y = squares[i][1]
        
        if intersect(squares[i]):
            highscores()
            
            cv2.imshow('image',img)
            k = cv2.waitKey(0)
            while k in [2490368, 2424832, 2621440, 2555904]:
                k = cv2.waitKey(0)
            return True
            
        if y < 1030:
            squares[i][1] += drop_speed + int(score/100)
            color = squares[i][3]
            fill = squares[i][4]
            cv2.rectangle(img,(x-6, y-4),(x+6,y+8),color,fill)
            if lines_up:
                line(x,y,square[0], square[1],color[0],color[1],color[2])
        else:
            count += 1
            score += (1*multiplier)
            del squares[i]

    return False

def move_left():
    global img, square, score, speed
    
    x = square[0]-8-(score/100)
    y = square[1]
    if x < 8:
        return
    txt = 'Score: ' + str(score)
    cv2.rectangle(img,(0,0),(1024,1024),(0,0,0),-1)
    cv2.rectangle(img,(x-12,y-12),(x+12,y+12),(0,255,0),-1)
    cv2.putText(img,txt,(0,24), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255))
    square = (x,y)

def move_right():
    global img, square, score, speed
    
    x = square[0]+8+(score/100)
    y = square[1]
    if x > 1016:
        return
    txt = 'Score: ' + str(score)
    cv2.rectangle(img,(0,0),(1024,1024),(0,0,0),-1)
    cv2.rectangle(img,(x-12,y-12),(x+12,y+12),(0,255,0),-1)
    cv2.putText(img,txt,(0,24), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255))
    square = (x,y)

def line(x1, y1, x2, y2, b, g, r):
    global img
    cv2.line(img,(x1,y1),(x2,y2),(b,g,r))

def bonus():
    global img, multiplier, multi_count, line_count, lines_up, drop_count, drop_speed, score
    
    if multiplier == 2:
        multi_count += 1
        if multi_count >= 1000:
            multiplier = 1
            multi_count = 0

    if lines_up:
        line_count += 1
        if line_count >= 750:
            lines_up = False

    if drop_speed == 7+int(score/100):
        drop_count += 1
        if drop_count >= 500:
            drop_count = 0
            drop_speed = 5

def get_user():
    global user
    
    k = 0
    s = 'User: '
    while k != 13: 
        cv2.rectangle(img,(0,0),(1024,1024),(0,0,0),-1)
        cv2.putText(img,s,(420,256), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255))
        cv2.imshow('image',img)
        k = cv2.waitKey(0)
        if k == 8:
            user = user[:-1]
        elif k != 13:
            user += chr(k)
        s = 'User: ' + user
   user = user[0].upper() + user[1:]    
        
def start():
    global img, squares, square, score, multiplier, multi_count, line_count, lines_up, drop_speed, drop_count, user

    squares = []
    square = (512,1012)
    score = 0
    multiplier = 1
    multi_count = 0
    line_count = 0
    lines_up = False
    drop_speed = 5
    drop_count = 0
    up = 2490368
    left = 2424832
    down = 2621440
    right = 2555904
    frequency = 0
    if user == '':
        get_user()
    
    cv2.namedWindow('image')
    cv2.rectangle(img,(0,0),(1024,1024),(0,0,0),-1)
    cv2.rectangle(img,(500,1000),(524,1024),(0,255,0),-1)
    cv2.putText(img,'Score: 0',(0,24), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255))

    while 1:

        cv2.imshow('image',img)
        k = cv2.waitKey(1)
        bonus()
        if fall():
            break
        
        if not frequency:
            drop()
        elif frequency >= (5-int(score/500)):
            frequency = -1
        
        if k == left:
            move_left()
        elif k == right:
            move_right()
        elif k == 27:
            break
        frequency += 1

    return

def main():
    while 1:
        
        cv2.namedWindow('image')
        cv2.rectangle(img,(0,0),(1024,1024),(0,0,0),-1)
        cv2.putText(img,'Start(y/n)',(435,512), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255))
        cv2.imshow('image',img)
        k = cv2.waitKey(0)
        if k == ord('y'):
            
            start()
        elif k == ord('n'):
            cv2.destroyAllWindows()
            sys.exit(1)

if __name__ == "__main__":
    main()
